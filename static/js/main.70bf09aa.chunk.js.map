{"version":3,"sources":["config/firebase.js","AuthService.js","pages/Login.jsx","pages/SignUp.jsx","components/Messages.jsx","pages/Room.jsx","LoggedInRoute.js","App.jsx","index.js"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","AuthContext","React","createContext","AuthProvider","children","useState","user","setUser","useEffect","auth","onAuthStateChanged","Provider","value","Login","history","email","setEmail","password","setPassword","useContext","to","onSubmit","e","preventDefault","signInWithEmailAndPassword","then","push","catch","err","console","log","htmlFor","type","id","name","placeholder","onChange","target","onClick","currentUser","updateProfile","displayName","shortid","generate","SignUp","setName","createUserWithEmailAndPassword","Messages","messages","setMessages","firestore","collection","onSnapshot","snapshot","getMessages","docs","map","doc","data","sort","a","b","time","message","index","key","content","Room","setValue","d","Date","replace","String","getFullYear","getMonth","slice","getDate","getHours","getMinutes","getSeconds","add","error","signOut","LoggedInRoute","Component","component","rest","render","props","App","exact","path","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.70bf09aa.chunk.js","sourcesContent":["// firebaseをimport\nimport * as firebase from \"firebase/app\";\nimport \"firebase/auth\";\n\nconst firebaseConfig = {\n  // 各人の認証情報を記述（firebaseからコピペ）\n  apiKey: \"AIzaSyABFUJab4y5PUhBkCkNOKwmCklnoYeSsp4\",\n  authDomain: \"chatapp-nbp.firebaseapp.com\",\n  databaseURL: \"https://chatapp-nbp.firebaseio.com\",\n  projectId: \"chatapp-nbp\",\n  storageBucket: \"chatapp-nbp.appspot.com\",\n  messagingSenderId: \"907279149180\",\n  appId: \"1:907279149180:web:008d247956b9e99fff81f9\",\n  measurementId: \"G-NM2CEPP9R7\"\n};\n\n// 上の認証情報をfirebaseに登録して\nfirebase.initializeApp(firebaseConfig);\n// エクスポート\nexport default firebase;\n","import React, { useState, useEffect } from \"react\";\nimport firebase from \"./config/firebase\";\n\nconst AuthContext = React.createContext();\nconst AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n\n  // setU\n  useEffect(() => {\n    firebase.auth().onAuthStateChanged((user) => {\n      setUser(user);\n    });\n  }, []);\n\n  return <AuthContext.Provider value={user}>{children}</AuthContext.Provider>;\n};\n\nexport { AuthContext, AuthProvider };","import React, { useState, useContext } from \"react\";\nimport firebase from \"../config/firebase\";\nimport { AuthContext } from \"../AuthService\";\nimport { Redirect, Link } from \"react-router-dom\";\nimport shortid from \"shortid\"\n\nconst Login = ({ history }) => {\n  // Stateを準備しますー\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  // ログインボタン押したときの関数\n  const user = useContext(AuthContext);\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    firebase\n      .auth()\n      .signInWithEmailAndPassword(email, password)\n      .then(() => {\n        history.push(\"/\"); // \"/\"に遷移\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n  const guestLogin = (e) => {\n    e.preventDefault();\n    firebase\n      .auth()\n      .signInWithEmailAndPassword(\"guest@guest.com\", \"a12345\")\n      .then(() => {\n        firebase.auth().currentUser.updateProfile({ displayName: \"guest_\" + shortid.generate() })\n      })\n      .then(() => {\n        history.push(\"/\");\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }\n  // ログイン済みの場合はリダイレクト\n  if (user) {\n    return <Redirect to={\"/\"} />;\n  }\n  return (\n    <>\n      <h1>Login</h1>\n      <form onSubmit={handleSubmit}>\n        <div>\n          <label htmlFor=\"email\">E-mail</label>\n          <input\n            type=\"email\"\n            id=\"email\"\n            name=\"email\"\n            placeholder=\"Email\"\n            onChange={(e) => {\n              setEmail(e.target.value);\n            }}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"password\">Password</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            name=\"email\"\n            placeholder=\"password\"\n            onChange={(e) => {\n              setPassword(e.target.value);\n            }}\n          />\n        </div>\n        <button type=\"submit\">Login</button>\n      </form>\n      <button onClick={guestLogin}>Guestでログイン</button>\n      <br />\n      <Link to=\"/signup\">サインアップ</Link>\n    </>\n  );\n};\n\nexport default Login;\n","import React from \"react\";\n// 中括弧は必要だった\nimport { useState } from \"react\";\nimport firebase from \"../config/firebase\";\nimport { Link } from \"react-router-dom\";\nimport shortid from 'shortid';\n\n\nconst SignUp = ({ history }) => {\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    firebase.auth().createUserWithEmailAndPassword(email, password)\n      .then(() => {\n        firebase.auth().currentUser.updateProfile({ displayName: name })\n          .then(() => {\n            history.push(\"/\");\n            // console.log(\"サインアップ成功！\")\n            // console.log(firebase.auth().currentUser)\n          })\n      })\n      // 失敗したら以下が発動する\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  const guestLogin = (e) => {\n    e.preventDefault();\n    firebase\n      .auth()\n      .signInWithEmailAndPassword(\"guest@guest.com\", \"a12345\")\n      .then(() => {\n        firebase.auth().currentUser.updateProfile({ displayName: \"guest_\" + shortid.generate() })\n      })\n      .then(() => {\n        history.push(\"/\"); // \"/\"に遷移\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }\n  return (\n    <div>\n      <h1>Sign Up</h1>\n      <form onSubmit={handleSubmit}>\n        <div>\n          <label htmlFor=\"userName\">User Name</label>\n          <input\n            name=\"name\"\n            type=\"text\"\n            id=\"userName\"\n            placeholder=\"UserName\"\n            onChange={(e) => {\n              setName(e.target.value);\n            }}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"email\">E-mail</label>\n          <input\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            placeholder=\"Email\"\n            onChange={(e) => {\n              setEmail(e.target.value);\n            }}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"password\">Password</label>\n          <input\n            name=\"password\"\n            type=\"password\"\n            id=\"password\"\n            placeholder=\"Password\"\n            onChange={(e) => {\n              setPassword(e.target.value);\n            }}\n          />\n        </div>\n        <button type=\"submit\">Sign Up</button>\n      </form>\n      <button onClick={guestLogin}>Guestでログイン</button>\n      <br />\n      <Link to=\"/login\">ログイン画面へ</Link>\n    </div>\n  );\n};\n\nexport default SignUp;","// Room.js\nimport React, { useState, useEffect } from \"react\";\nimport firebase from \"../config/firebase\";\nimport \"firebase/firestore\";\n\nconst Messages = () => {\n    const [messages, setMessages] = useState(null);\n    useEffect(() => {\n        firebase.firestore()\n            .collection(\"messages\")\n            .onSnapshot((snapshot) => {\n                // 取得します\n                let getMessages = snapshot.docs.map((doc) => {\n                    return doc.data();\n                });\n                // 並び替えます（timeで）\n                getMessages = getMessages.sort((a, b) => {\n                    if (a.time > b.time) {\n                        return 1;\n                    } else {\n                        return -1;\n                    }\n                })\n                // それを更新します\n                setMessages(getMessages);\n            });\n    }, [messages]);\n    // messagesが変更されたときだけ実行,[]なら,常に実行.\n\n    return (\n        <>\n            <h2>MESSAGES!!</h2>\n            {/* 条件付きレンダリング これはVueの方が優秀 */}\n            {messages &&\n                <>\n                    {messages.map((message, index) => {\n                        return (\n                            <div key={index}>\n                                <hr />\n                                <p>name: {message.user} | {message.time}</p>\n                                <p>message: {message.content}</p>\n                            </div>\n                        )\n                    })}\n                </>\n            }\n        </>\n    );\n};\n\nexport default Messages;","// Room.js\nimport React, { useState, useContext } from \"react\";\nimport firebase from \"../config/firebase\";\nimport \"firebase/firestore\";\nimport { AuthContext } from \"../AuthService\";\nimport Messages from \"../components/Messages\"\n\nconst Room = () => {\n  const [value, setValue] = useState('')\n\n\n  const user = useContext(AuthContext);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const d = new Date(); // Today\n    const DateTimeFormat = 'YYYY/MM/DD hh:mi:ss'; // \"2019/10/04 12:34:56\" \n    let time = DateTimeFormat\n      .replace(/YYYY/g, String(d.getFullYear()))\n      .replace(/MM/g, ('0' + (d.getMonth() + 1)).slice(-2))\n      .replace(/DD/g, ('0' + d.getDate()).slice(-2))\n      .replace(/hh/g, ('0' + d.getHours()).slice(-2))\n      .replace(/mi/g, ('0' + d.getMinutes()).slice(-2))\n      .replace(/ss/g, ('0' + d.getSeconds()).slice(-2));\n    firebase.firestore().collection('messages').add({\n      content: value,\n      user: user.displayName,\n      time: time\n    })\n      .catch((error) => { console.log(error) })\n    // 入力ボックスを初期化\n    setValue(\"\");\n  }\n  // console.log(messages);\n  return (\n    <>\n      <h1>ChatApp</h1>\n      <Messages />\n      <hr />\n      <p>{user.displayName}でログインしています</p>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          value={value}\n          onChange={e => setValue(e.target.value)}\n        />\n        <button type=\"submit\">送信</button>\n      </form>\n      <button onClick={() => firebase.auth().signOut()}>Logout</button>\n    </>\n  );\n};\n\nexport default Room;","import React, { useContext } from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { AuthContext } from \"./AuthService\";\n\n// これはRouteComponentsを条件付きで使用するもの\nconst LoggedInRoute = ({ component: Component, ...rest }) => {\n  const user = useContext(AuthContext);\n  return (\n    <Route\n      {...rest}\n      // ここは普段のRouteでProps渡すときと同じ書き方\n      // 今回はなにも渡すものがないんだけどね...\n      render={(props) =>\n        user ? <Component {...props} /> : <Redirect to={\"/login\"} />\n      }\n    />\n    // これもでいけるのか？\n    // <>\n    //   user ?\n    //   <Route exact path=\"/\" component={Component} />\n    // :\n    //   <Redirect to={\"/login\"} />\n    // </>\n  );\n};\n\nexport default LoggedInRoute;","import React from \"react\";\nimport Login from \"./pages/Login\";\nimport SignUp from \"./pages/SignUp\";\nimport Room from \"./pages/Room\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n// ログインシステム用\nimport { AuthProvider } from \"./AuthService\";\n\n// ログイン時のページ\nimport LoggedInRoute from \"./LoggedInRoute\";\n\nfunction App() {\n  return (\n    <AuthProvider>\n      <Router>\n        <Switch>\n          <LoggedInRoute exact path=\"/\" component={Room} />\n          <Route exact path=\"/\" component={Room} />\n          <Route exact path=\"/login\" component={Login} />\n          <Route exact path=\"/signup\" component={SignUp} />\n        </Switch>\n      </Router>\n    </AuthProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}